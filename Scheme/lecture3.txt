; lecture 3
 
   (+ 2 3)
=> 5
   (+ 2 4 5 6)
=> 17
   (+)
=> 0
   (define a 3)
   a
=> 3
   (a)
Error: 3 is not a function [a]
   (2.1 2.2 2.3)
Error: 2.1 is not a function [a, (anon)]
   (define (average x y) (/ (+ x y) 2))
   average
=> #<Closure>
   (average 20 30)
=> 25
   (define bad (/ 1 0))
   bad
=> +inf.0
   (define (good) (/ 1 0))
   good
=> #<Closure>
   good()
=> ()
   (good)
=> +inf.0
   '(1 2 3)
=> (1 2 3)
   (quote (1 2 4))
=> (1 2 4)



(define (fact n) 
    (if (= n 0) 1
        (* (fact (- n 1)) n)
    )
)


(define (tr-fact x y ) 
    (if (= x 0) y
        (tr-fact (- x 1) (* x y))
    )
)

(define (fact n)
    (define (tr-fact x y ) 
        (if (= x 0) y
            (tr-fact (- x 1) (* x y))
        )
    )
    (tr-fact n 1)    
)


; '(branch (leaf) 5 (branch (leaf) 7 (leaf)))

(define (left t)
    (if (eq? (car t) 'branch)
        (car (cdr t))
        (display "error")
    )
)

(define (right t)
    (if (eq? (car t) 'branch)
        (cadddr t)
        (display "error")
    )
)

; higher order function

(define (square x) (* x x))

(define (square-list l) 
    (if (null? l) '()
        (cons (square (car l)) (square-list (cdr l)))
    )
)

(define (ho-square-list l)
    (map square l)
)

(define (mymap f l)
    (if (null? l) '()
        (cons (f (car l)) (mymap f (cdr l)))
	)
)


   (ho-square-list '(0 1 2 3 4 5))
=> (0 1 4 9 16 25)
   
   (mymap square '(0 1 2 3 4 5))
=> (0 1 4 9 16 25)
   (square-list '(0 1 2 3 4 5))
=> (0 1 4 9 16 25)



; lambda function
   (lambda (x) (* 2 x))
=> #<Closure>
   ((lambda (x) (* 2 x)) 8)
=> 16
   (mymap (lambda (x) (* 2 x)) '(0 1 2 3 4 5))
=> (0 2 4 6 8 10)
   
